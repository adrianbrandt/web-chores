generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum UserRole {
  USER
  ADMIN
}

enum GroupType {
  HOUSEHOLD
  WORKPLACE
  PROJECT
  FAMILY
  FRIENDS
  CUSTOM
}

enum GroupMemberRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum ListType {
  CHORES
  SHOPPING
  TODO
  BUDGET
  EVENT_PLANNING
  MAINTENANCE
}

enum ListItemStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  BLOCKED
}

enum RecurrenceFrequency {
  ONE_TIME
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
  CUSTOM
}

enum NotificationPreference {
  EMAIL
  SMS
  PUSH
  IN_APP
}

model User {
  id                   String        @id @default(uuid())
  name                 String
  username             String        @unique
  email                String?       @unique
  phoneNumber          String?       @unique
  password             String
  avatarUrl            String?
  isVerified           Boolean       @default(false)
  verificationCode     String?
  verificationExpires  DateTime?
  passwordResetToken   String?
  passwordResetExpires DateTime?
  accountStatus        AccountStatus @default(ACTIVE)
  role                 UserRole      @default(USER)
  lastLogin            DateTime?

  notificationPreference NotificationPreference @default(IN_APP)

  friendships UserFriendship[] @relation("UserFriends")
  friendOf    UserFriendship[] @relation("FriendOf")

  groupMemberships GroupMember[]
  ownedGroups      Group[]

  ownedLists          List[]
  assignedItems       ListItem[]
  completedItems      ListItem[]           @relation("CompletedItems")
  listCollaborations  ListCollaborator[]
  uploadedAttachments ListItemAttachment[]

  preferences UserPreference?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email, phoneNumber])
}

model UserFriendship {
  id       String           @id @default(uuid())
  user     User             @relation("UserFriends", fields: [userId], references: [id])
  userId   String
  friend   User             @relation("FriendOf", fields: [friendId], references: [id])
  friendId String
  status   FriendshipStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, friendId])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

model UserPreference {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  darkMode Boolean @default(false)
  language String  @default("en")

  emailNotifications Boolean @default(true)
  pushNotifications  Boolean @default(true)

  profileVisibility ProfileVisibility @default(FRIENDS)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ProfileVisibility {
  PUBLIC
  FRIENDS
  PRIVATE
}

model Group {
  id          String    @id @default(uuid())
  name        String
  description String?
  type        GroupType @default(CUSTOM)

  lists   List[]
  members GroupMember[]

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  inviteCode String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GroupMember {
  id      String @id @default(uuid())
  group   Group  @relation(fields: [groupId], references: [id])
  groupId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  role GroupMemberRole @default(MEMBER)

  joinedAt DateTime @default(now())

  @@unique([groupId, userId])
}

model List {
  id          String   @id @default(uuid())
  name        String
  type        ListType
  description String?
  isShared    Boolean  @default(false)

  group   Group?  @relation(fields: [groupId], references: [id])
  groupId String?

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  items      ListItem[]
  recurrence ListRecurrence?

  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  collaborators ListCollaborator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ListCollaborator {
  id     String @id @default(uuid())
  list   List   @relation(fields: [listId], references: [id])
  listId String
  user   User   @relation(fields: [userId], references: [id])
  userId String

  role ListCollaboratorRole @default(VIEWER)

  @@unique([listId, userId])
}

enum ListCollaboratorRole {
  OWNER
  EDITOR
  VIEWER
}

model ListItem {
  id     String @id @default(uuid())
  list   List   @relation(fields: [listId], references: [id])
  listId String

  title       String
  description String?

  status ListItemStatus @default(PENDING)

  assignedTo   User?   @relation(fields: [assignedToId], references: [id])
  assignedToId String?

  quantity     Float?
  timeEstimate Int?

  completedBy   User?     @relation("CompletedItems", fields: [completedById], references: [id])
  completedById String?
  completedAt   DateTime?

  priority Priority  @default(MEDIUM)
  dueDate  DateTime?

  attachments ListItemAttachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model ListItemAttachment {
  id         String   @id @default(uuid())
  listItem   ListItem @relation(fields: [listItemId], references: [id])
  listItemId String

  fileName String
  fileUrl  String
  fileType String

  uploadedBy   User   @relation(fields: [uploadedById], references: [id])
  uploadedById String

  createdAt DateTime @default(now())
}

model ListRecurrence {
  id     String @id @default(uuid())
  list   List   @relation(fields: [listId], references: [id])
  listId String @unique

  frequency RecurrenceFrequency

  customInterval Int?

  startDate      DateTime
  endDate        DateTime?
  lastOccurrence DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
